{
  "type": "root",
  "children": [
    {
      "type": "export",
      "value": "export const meta = {\n  title: '数组随机排序算法',\n  time: 'Jan 01 2020'\n}",
      "position": {
        "start": { "line": 1, "column": 1, "offset": 0 },
        "end": { "line": 4, "column": 2, "offset": 66 },
        "indent": [1, 1, 1]
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "之前被问到数组随机排序算法，我很快地写了如下代码：",
          "position": {
            "start": { "line": 6, "column": 1, "offset": 68 },
            "end": { "line": 6, "column": 26, "offset": 93 }
          }
        }
      ],
      "position": {
        "start": { "line": 6, "column": 1, "offset": 68 },
        "end": { "line": 6, "column": 26, "offset": 93 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "pre",
      "properties": {},
      "children": [
        {
          "type": "element",
          "tagName": "code",
          "properties": { "className": ["language-js"] },
          "children": [
            {
              "type": "text",
              "value": "function shuffle(array) {\n  return array.sort(() => Math.random() - 0.5)\n}\n"
            }
          ],
          "position": {
            "start": { "line": 8, "column": 1, "offset": 95 },
            "end": { "line": 12, "column": 4, "offset": 179 }
          }
        }
      ],
      "position": {
        "start": { "line": 8, "column": 1, "offset": 95 },
        "end": { "line": 12, "column": 4, "offset": 179 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "利用数组的sort算法，比较函数返回一个-0.5到0.5的随机数，这个方法看似可行，其实有很大的问题。",
          "position": {
            "start": { "line": 14, "column": 1, "offset": 181 },
            "end": { "line": 14, "column": 52, "offset": 232 }
          }
        }
      ],
      "position": {
        "start": { "line": 14, "column": 1, "offset": 181 },
        "end": { "line": 14, "column": 52, "offset": 232 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "h3",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "V8 sort",
          "position": {
            "start": { "line": 16, "column": 5, "offset": 238 },
            "end": { "line": 16, "column": 12, "offset": 245 }
          }
        }
      ],
      "position": {
        "start": { "line": 16, "column": 1, "offset": 234 },
        "end": { "line": 16, "column": 12, "offset": 245 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "从v8 blog",
          "position": {
            "start": { "line": 18, "column": 1, "offset": 247 },
            "end": { "line": 18, "column": 9, "offset": 255 }
          }
        },
        {
          "type": "element",
          "tagName": "a",
          "properties": { "href": "https://v8.dev/blog/array-sort" },
          "children": [
            {
              "type": "text",
              "value": "https://v8.dev/blog/array-sort",
              "position": {
                "start": { "line": 18, "column": 10, "offset": 256 },
                "end": { "line": 18, "column": 40, "offset": 286 }
              }
            }
          ],
          "position": {
            "start": { "line": 18, "column": 9, "offset": 255 },
            "end": { "line": 18, "column": 73, "offset": 319 }
          }
        },
        {
          "type": "text",
          "value": "上可以看到，v8 sort现在是采用Timsort算法，TimSort算法是一种起源于归并排序和插入排序的混合排序算法；而在以前，则是采用插入排序(长度小于10时)+快排的算法",
          "position": {
            "start": { "line": 18, "column": 73, "offset": 319 },
            "end": { "line": 18, "column": 161, "offset": 407 }
          }
        }
      ],
      "position": {
        "start": { "line": 18, "column": 1, "offset": 247 },
        "end": { "line": 18, "column": 161, "offset": 407 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "既然怎样都跑不开插入排序，那就以插入排序为排序算法，以数组",
          "position": {
            "start": { "line": 20, "column": 1, "offset": 409 },
            "end": { "line": 20, "column": 30, "offset": 438 }
          }
        },
        {
          "type": "element",
          "value": "[1, 2, 3]",
          "position": {
            "start": { "line": 20, "column": 30, "offset": 438 },
            "end": { "line": 20, "column": 41, "offset": 449 },
            "indent": []
          },
          "tagName": "inlineCode",
          "properties": {},
          "children": [{ "type": "text", "value": "[1, 2, 3]" }]
        },
        {
          "type": "text",
          "value": " 为样例，计算得出通过random sort后得到",
          "position": {
            "start": { "line": 20, "column": 41, "offset": 449 },
            "end": { "line": 20, "column": 66, "offset": 474 }
          }
        },
        {
          "type": "element",
          "value": "[1, 2, 3]",
          "position": {
            "start": { "line": 20, "column": 66, "offset": 474 },
            "end": { "line": 20, "column": 77, "offset": 485 },
            "indent": []
          },
          "tagName": "inlineCode",
          "properties": {},
          "children": [{ "type": "text", "value": "[1, 2, 3]" }]
        },
        {
          "type": "text",
          "value": "的概率为25%（第一次插入得到",
          "position": {
            "start": { "line": 20, "column": 77, "offset": 485 },
            "end": { "line": 20, "column": 92, "offset": 500 }
          }
        },
        {
          "type": "element",
          "value": "[1, 2]",
          "position": {
            "start": { "line": 20, "column": 92, "offset": 500 },
            "end": { "line": 20, "column": 100, "offset": 508 },
            "indent": []
          },
          "tagName": "inlineCode",
          "properties": {},
          "children": [{ "type": "text", "value": "[1, 2]" }]
        },
        {
          "type": "text",
          "value": "概率为50%，得到",
          "position": {
            "start": { "line": 20, "column": 100, "offset": 508 },
            "end": { "line": 20, "column": 109, "offset": 517 }
          }
        },
        {
          "type": "element",
          "value": "[1, 2]",
          "position": {
            "start": { "line": 20, "column": 109, "offset": 517 },
            "end": { "line": 20, "column": 117, "offset": 525 },
            "indent": []
          },
          "tagName": "inlineCode",
          "properties": {},
          "children": [{ "type": "text", "value": "[1, 2]" }]
        },
        {
          "type": "text",
          "value": "后3直接插入队尾的概率为50%），而我们知道，真正的随机算法得到",
          "position": {
            "start": { "line": 20, "column": 117, "offset": 525 },
            "end": { "line": 20, "column": 149, "offset": 557 }
          }
        },
        {
          "type": "element",
          "value": "[1, 2, 3]",
          "position": {
            "start": { "line": 20, "column": 149, "offset": 557 },
            "end": { "line": 20, "column": 160, "offset": 568 },
            "indent": []
          },
          "tagName": "inlineCode",
          "properties": {},
          "children": [{ "type": "text", "value": "[1, 2, 3]" }]
        },
        {
          "type": "text",
          "value": "的概率应该为1/6",
          "position": {
            "start": { "line": 20, "column": 160, "offset": 568 },
            "end": { "line": 20, "column": 169, "offset": 577 }
          }
        }
      ],
      "position": {
        "start": { "line": 20, "column": 1, "offset": 409 },
        "end": { "line": 20, "column": 169, "offset": 577 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "除了插入排序，其他排序算法也会有这些问题，可以在这个网站上测试你的随机排序算法：",
          "position": {
            "start": { "line": 22, "column": 1, "offset": 579 },
            "end": { "line": 22, "column": 41, "offset": 619 }
          }
        },
        {
          "type": "element",
          "tagName": "a",
          "properties": {
            "href": "https://bost.ocks.org/mike/shuffle/compare.html"
          },
          "children": [
            {
              "type": "text",
              "value": "https://bost.ocks.org/mike/shuffle/compare.html",
              "position": {
                "start": { "line": 22, "column": 42, "offset": 620 },
                "end": { "line": 22, "column": 89, "offset": 667 }
              }
            }
          ],
          "position": {
            "start": { "line": 22, "column": 41, "offset": 619 },
            "end": { "line": 22, "column": 139, "offset": 717 }
          }
        }
      ],
      "position": {
        "start": { "line": 22, "column": 1, "offset": 579 },
        "end": { "line": 22, "column": 139, "offset": 717 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "h3",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "改进",
          "position": {
            "start": { "line": 24, "column": 5, "offset": 723 },
            "end": { "line": 24, "column": 7, "offset": 725 }
          }
        }
      ],
      "position": {
        "start": { "line": 24, "column": 1, "offset": 719 },
        "end": { "line": 24, "column": 7, "offset": 725 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "究其原因，这种方式在每次比较时的概率都是独立的。我们可以在算法开始为每一项生成一个随机数，利用这个随机数作为比较的依据：",
          "position": {
            "start": { "line": 26, "column": 1, "offset": 727 },
            "end": { "line": 26, "column": 61, "offset": 787 }
          }
        }
      ],
      "position": {
        "start": { "line": 26, "column": 1, "offset": 727 },
        "end": { "line": 26, "column": 61, "offset": 787 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "pre",
      "properties": {},
      "children": [
        {
          "type": "element",
          "tagName": "code",
          "properties": { "className": ["language-js"] },
          "children": [
            {
              "type": "text",
              "value": "function shuffle(array) {\n  const random = {}\n  array.forEach(item => {\n    random[item] = Math.random()\n  })\n  return array.sort((a, b) => {\n    return random[a] - random[b]\n  })\n}\n"
            }
          ],
          "position": {
            "start": { "line": 28, "column": 1, "offset": 789 },
            "end": { "line": 38, "column": 4, "offset": 980 }
          }
        }
      ],
      "position": {
        "start": { "line": 28, "column": 1, "offset": 789 },
        "end": { "line": 38, "column": 4, "offset": 980 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "这样做解决了上述问题，每个数在比较时的概率不再独立。但也有缺点：会有额外的空间，时间复杂度为O(nlogn)，有没有更好的方法呢？",
          "position": {
            "start": { "line": 40, "column": 1, "offset": 982 },
            "end": { "line": 40, "column": 66, "offset": 1047 }
          }
        }
      ],
      "position": {
        "start": { "line": 40, "column": 1, "offset": 982 },
        "end": { "line": 40, "column": 66, "offset": 1047 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "h3",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "再次改进：Fisher–Yates算法",
          "position": {
            "start": { "line": 42, "column": 5, "offset": 1053 },
            "end": { "line": 42, "column": 24, "offset": 1072 }
          }
        }
      ],
      "position": {
        "start": { "line": 42, "column": 1, "offset": 1049 },
        "end": { "line": 42, "column": 24, "offset": 1072 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "Fisher–Yates算法是由Ronald Fisher和Frank Yates共同提出，其用js的实现如下：",
          "position": {
            "start": { "line": 44, "column": 1, "offset": 1074 },
            "end": { "line": 44, "column": 57, "offset": 1130 }
          }
        }
      ],
      "position": {
        "start": { "line": 44, "column": 1, "offset": 1074 },
        "end": { "line": 44, "column": 57, "offset": 1130 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "pre",
      "properties": {},
      "children": [
        {
          "type": "element",
          "tagName": "code",
          "properties": { "className": ["language-js"] },
          "children": [
            {
              "type": "text",
              "value": "function shuffle(array) {\n  let n = array.length;\n  while (n > 0) {\n    const i = Math.floor(Math.random() * n--)\n    const tmp = array[i]\n    array[i] = array[n]\n    array[n] = tmp\n  }\n  return array\n}\n"
            }
          ],
          "position": {
            "start": { "line": 46, "column": 1, "offset": 1132 },
            "end": { "line": 57, "column": 4, "offset": 1344 }
          }
        }
      ],
      "position": {
        "start": { "line": 46, "column": 1, "offset": 1132 },
        "end": { "line": 57, "column": 4, "offset": 1344 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "核心思想：每次从剩余的项里随机取一个项，记录并剔除该项再进入下次循环",
          "position": {
            "start": { "line": 59, "column": 1, "offset": 1346 },
            "end": { "line": 59, "column": 35, "offset": 1380 }
          }
        }
      ],
      "position": {
        "start": { "line": 59, "column": 1, "offset": 1346 },
        "end": { "line": 59, "column": 35, "offset": 1380 }
      }
    },
    { "type": "text", "value": "\n" },
    {
      "type": "element",
      "tagName": "p",
      "properties": {},
      "children": [
        {
          "type": "text",
          "value": "Fisher–Yates算法做到了不额外申请空间&O(n)的时间复杂度，可以说是最优的随机排序算法了",
          "position": {
            "start": { "line": 61, "column": 1, "offset": 1382 },
            "end": { "line": 61, "column": 51, "offset": 1432 }
          }
        }
      ],
      "position": {
        "start": { "line": 61, "column": 1, "offset": 1382 },
        "end": { "line": 61, "column": 51, "offset": 1432 }
      }
    }
  ],
  "position": {
    "start": { "line": 1, "column": 1, "offset": 0 },
    "end": { "line": 62, "column": 1, "offset": 1433 }
  }
}
